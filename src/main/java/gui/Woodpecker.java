/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gui;

import woodpecker.Start;
import components.ButtonTabComponent;
import database.CalendarHandler;
import database.CalendarType;
import database.TablesHandler;
import database.tweetHandler;
import filemanagement.FilesCleaner;
import filemanagement.ImportFiles;
import java.awt.Toolkit;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.util.concurrent.TimeUnit;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultCaret;
import model.LMDrillModel;
import model.TMDrillModel;
import ngram.NGramDriver;
import tweets.TweetCleaner;

/**
 *
 * @author Nancy
 */
public class Woodpecker extends javax.swing.JFrame {

    private String TABLE_NAME = "tweets";
    private CalendarType TABLE_CALENDAR_FORMAT = CalendarType.OTHER;
    
    /**
     * Creates new form Woodpecker
     */
    public Woodpecker() {
        initComponents();
        initialize();
    }

    /**
     * Initialize user interface.
     */
    private void initialize() {
        this.setIconImage(Toolkit.getDefaultToolkit().getImage("iconwoodpecker.png"));
        ImageIcon bgimg = new ImageIcon(Toolkit.getDefaultToolkit().getImage(System.getProperty("user.dir")+"/src/main/java/gui/" + "clouds.jpg"));
        background.setIcon(bgimg);
        DefaultCaret caret = (DefaultCaret)systemOutArea.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        setDisabled();
        insertImportedTables();
    }
    
    /**
     * Sets initially disabled components.
     */
    public void setDisabled(){
        filterCriteriaPanel.setEnabled(false);
        
        keywordCB.setEnabled(false);
        keywordTF.setEnabled(false);
        
        sDateLabel.setEnabled(false);
        eDateLabel.setEnabled(false);
        dateCB.setEnabled(false);
        smonthMB.setEnabled(false);
        sdayMB.setEnabled(false);
        syearMB.setEnabled(false);
        emonthMB.setEnabled(false);
        edayMB.setEnabled(false);
        eyearMB.setEnabled(false);
        beginBtn.setEnabled(false);
        
        lmRB.setEnabled(false);
        topicRB.setEnabled(false);
        
        browseBtn.setEnabled(false);
        
        
    }
    
    /**
     * Enables date boxes.
     */
    private void setDateBoxesEnabled(boolean status){
        sDateLabel.setEnabled(status);
        eDateLabel.setEnabled(status);
        smonthMB.setEnabled(status);
        sdayMB.setEnabled(status);
        syearMB.setEnabled(status);
        emonthMB.setEnabled(status);
        edayMB.setEnabled(status);
        eyearMB.setEnabled(status);
    }
    
    /**
     * Insert imported tables into import combobox.
     */
    private void insertImportedTables(){
        if(importCB.getItemCount() != 0){ importCB.removeAllItems(); }
        for(String s : TablesHandler.getAllImportTables()){
            importCB.addItem(s);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dataGrp = new javax.swing.ButtonGroup();
        methodGrp = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        tweetSourcePanel = new javax.swing.JPanel();
        importBtn = new javax.swing.JRadioButton();
        browseBtn = new javax.swing.JButton();
        locdbBtn = new javax.swing.JRadioButton();
        jSeparator2 = new javax.swing.JSeparator();
        selectSourceBtn = new javax.swing.JButton();
        importCB = new javax.swing.JComboBox();
        filterCriteriaPanel = new javax.swing.JPanel();
        keywordTF = new javax.swing.JTextField();
        sDateLabel = new javax.swing.JLabel();
        eDateLabel = new javax.swing.JLabel();
        keywordCB = new javax.swing.JCheckBox();
        dateCB = new javax.swing.JCheckBox();
        jSeparator5 = new javax.swing.JSeparator();
        topicRB = new javax.swing.JRadioButton();
        lmRB = new javax.swing.JRadioButton();
        jSeparator6 = new javax.swing.JSeparator();
        smonthMB = new javax.swing.JComboBox();
        sdayMB = new javax.swing.JComboBox();
        emonthMB = new javax.swing.JComboBox();
        edayMB = new javax.swing.JComboBox();
        syearMB = new javax.swing.JComboBox();
        eyearMB = new javax.swing.JComboBox();
        beginBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        systemOutArea = new javax.swing.JTextArea();
        progressBar = new javax.swing.JProgressBar();
        tabPane = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        startBtn = new javax.swing.JButton();
        background = new javax.swing.JLabel();

        setTitle("Woodpecker");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tweetSourcePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "TWEETS SOURCE", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        tweetSourcePanel.setOpaque(false);

        dataGrp.add(importBtn);
        importBtn.setText("IMPORT");
        importBtn.setOpaque(false);
        importBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importBtnActionPerformed(evt);
            }
        });

        browseBtn.setText("BROWSE..");
        browseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBtnActionPerformed(evt);
            }
        });

        dataGrp.add(locdbBtn);
        locdbBtn.setText("LOCAL DATABASE");
        locdbBtn.setOpaque(false);
        locdbBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locdbBtnActionPerformed(evt);
            }
        });

        selectSourceBtn.setText("SELECT SOURCE");
        selectSourceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectSourceBtnActionPerformed(evt);
            }
        });

        importCB.setEnabled(false);
        importCB.setMaximumSize(new java.awt.Dimension(28, 20));
        importCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tweetSourcePanelLayout = new javax.swing.GroupLayout(tweetSourcePanel);
        tweetSourcePanel.setLayout(tweetSourcePanelLayout);
        tweetSourcePanelLayout.setHorizontalGroup(
            tweetSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tweetSourcePanelLayout.createSequentialGroup()
                .addGroup(tweetSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(tweetSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(tweetSourcePanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(importBtn)
                            .addGap(13, 13, 13)
                            .addComponent(browseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(tweetSourcePanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(locdbBtn))
                        .addGroup(tweetSourcePanelLayout.createSequentialGroup()
                            .addGap(68, 68, 68)
                            .addComponent(importCB, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(tweetSourcePanelLayout.createSequentialGroup()
                            .addGap(72, 72, 72)
                            .addComponent(selectSourceBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(77, 77, 77))
        );
        tweetSourcePanelLayout.setVerticalGroup(
            tweetSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tweetSourcePanelLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(tweetSourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browseBtn)
                    .addComponent(importBtn))
                .addGap(7, 7, 7)
                .addComponent(importCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(locdbBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectSourceBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(tweetSourcePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 320, 190));

        filterCriteriaPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "FILTER CRITERIA", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        filterCriteriaPanel.setOpaque(false);

        sDateLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        sDateLabel.setText("START DATE");

        eDateLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        eDateLabel.setText("END DATE");

        keywordCB.setText("KEYWORD/S");
        keywordCB.setOpaque(false);
        keywordCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keywordCBActionPerformed(evt);
            }
        });

        dateCB.setText("DATE");
        dateCB.setOpaque(false);
        dateCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateCBActionPerformed(evt);
            }
        });

        methodGrp.add(topicRB);
        topicRB.setText("Topic Modeler");
        topicRB.setOpaque(false);
        topicRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topicRBActionPerformed(evt);
            }
        });

        methodGrp.add(lmRB);
        lmRB.setText("Language Modeler");
        lmRB.setOpaque(false);
        lmRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lmRBActionPerformed(evt);
            }
        });

        smonthMB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEPT", "OCT", "NOV", "DEC" }));
        smonthMB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smonthMBActionPerformed(evt);
            }
        });

        sdayMB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        emonthMB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEPT", "OCT", "NOV", "DEC" }));
        emonthMB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emonthMBActionPerformed(evt);
            }
        });

        edayMB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        beginBtn.setText("BEGIN");
        beginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beginBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout filterCriteriaPanelLayout = new javax.swing.GroupLayout(filterCriteriaPanel);
        filterCriteriaPanel.setLayout(filterCriteriaPanelLayout);
        filterCriteriaPanelLayout.setHorizontalGroup(
            filterCriteriaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterCriteriaPanelLayout.createSequentialGroup()
                .addGroup(filterCriteriaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(filterCriteriaPanelLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(filterCriteriaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sDateLabel)
                            .addGroup(filterCriteriaPanelLayout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(filterCriteriaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(emonthMB, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(smonthMB, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(filterCriteriaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(sdayMB, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(edayMB, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(filterCriteriaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(syearMB, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(eyearMB, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(eDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(filterCriteriaPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(filterCriteriaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dateCB)
                            .addGroup(filterCriteriaPanelLayout.createSequentialGroup()
                                .addComponent(keywordCB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(keywordTF, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(filterCriteriaPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(lmRB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(topicRB, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10))))
                    .addGroup(filterCriteriaPanelLayout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(beginBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        filterCriteriaPanelLayout.setVerticalGroup(
            filterCriteriaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterCriteriaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterCriteriaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keywordCB)
                    .addComponent(keywordTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dateCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sDateLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filterCriteriaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(smonthMB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sdayMB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(syearMB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(eDateLabel)
                .addGap(5, 5, 5)
                .addGroup(filterCriteriaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emonthMB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edayMB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eyearMB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(filterCriteriaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(topicRB)
                    .addComponent(lmRB))
                .addGap(12, 12, 12)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(beginBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        jPanel1.add(filterCriteriaPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 320, 310));

        systemOutArea.setColumns(20);
        systemOutArea.setLineWrap(true);
        systemOutArea.setRows(5);
        systemOutArea.setWrapStyleWord(true);
        jScrollPane2.setViewportView(systemOutArea);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 540, 320, 100));

        progressBar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        progressBar.setString(".....");
        progressBar.setStringPainted(true);
        jPanel1.add(progressBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 650, 300, 30));

        tabPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "OUTPUT", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        tabPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tabPane.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                tabPaneComponentRemoved(evt);
            }
        });

        jPanel2.setOpaque(false);

        startBtn.setText("Start Crawling");
        startBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(startBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 738, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(startBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(435, 435, 435))
        );

        tabPane.addTab("TWEET CRAWLER", jPanel2);

        jPanel1.add(tabPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 20, 830, 670));
        jPanel1.add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1200, 700));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1200, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void importBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importBtnActionPerformed
        if(importBtn.isSelected()){
            browseBtn.setEnabled(true);
            importCB.setEnabled(true);
        }
    }//GEN-LAST:event_importBtnActionPerformed

    private void browseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBtnActionPerformed
        new Thread(new ImportThread()).start();
    }//GEN-LAST:event_browseBtnActionPerformed

    private void locdbBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locdbBtnActionPerformed
        if(locdbBtn.isSelected()){
            browseBtn.setEnabled(false);
            importCB.setEnabled(false);
        }
    }//GEN-LAST:event_locdbBtnActionPerformed

    private void selectSourceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectSourceBtnActionPerformed
        if(dataGrp.getSelection() != null){
            filterCriteriaPanel.setEnabled(true);
            keywordCB.setEnabled(true);
            dateCB.setEnabled(true);
            beginBtn.setEnabled(true);
            lmRB.setEnabled(true);
            topicRB.setEnabled(true);

            if(importBtn.isSelected()){
                fillDateBoxes(importCB.getSelectedItem().toString());
                TABLE_NAME = importCB.getSelectedItem().toString();
            }else if(locdbBtn.isSelected()){
                TABLE_NAME = "tweets";
                TABLE_CALENDAR_FORMAT = CalendarType.GMT;
                fillDateBoxes(TABLE_NAME);

                //Fills year boxes (fpr demo purposes)
                /*
                int firstYear = 2013;
                int lastYear = 2014;

                if(syearMB.getItemCount() != 0)
                syearMB.removeAllItems();
                if(eyearMB.getItemCount() != 0)
                eyearMB.removeAllItems();

                for(int y = firstYear; y <= lastYear; y++){
                    syearMB.addItem(y);
                    eyearMB.addItem(y);
                }
                */
            }
        }else{
            JOptionPane.showMessageDialog(null, "Must select tweet data source.", "Tweets Source Requirement", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_selectSourceBtnActionPerformed

    private void keywordCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keywordCBActionPerformed
        if(keywordCB.isSelected()) {
            keywordTF.setEnabled(true); }
        else{
            keywordTF.setEnabled(false); }
    }//GEN-LAST:event_keywordCBActionPerformed

    private void dateCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateCBActionPerformed
        if(dateCB.isSelected()){
            setDateBoxesEnabled(true);
        }else{
            setDateBoxesEnabled(false);
        }
    }//GEN-LAST:event_dateCBActionPerformed

    private void topicRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topicRBActionPerformed

    }//GEN-LAST:event_topicRBActionPerformed

    private void lmRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lmRBActionPerformed

    }//GEN-LAST:event_lmRBActionPerformed

    private void beginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beginBtnActionPerformed

        new Thread(new TweetpeckThread()).start();

    }//GEN-LAST:event_beginBtnActionPerformed

    private void smonthMBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smonthMBActionPerformed
        if(sdayMB.getItemCount() != 0)
        sdayMB.removeAllItems();
        for(int x = 1; x <= CalendarHandler.numDaysinMonthname(smonthMB.getSelectedItem().toString(), Integer.parseInt(syearMB.getSelectedItem().toString())); x++){
            sdayMB.addItem(x);
        }
    }//GEN-LAST:event_smonthMBActionPerformed

    private void emonthMBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emonthMBActionPerformed
        if(edayMB.getItemCount() != 0)
        edayMB.removeAllItems();
        for(int x = 1; x <= CalendarHandler.numDaysinMonthname(emonthMB.getSelectedItem().toString(), Integer.parseInt(eyearMB.getSelectedItem().toString())); x++){
            edayMB.addItem(x);
        }
    }//GEN-LAST:event_emonthMBActionPerformed

    private void startBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBtnActionPerformed
        CrawlerStream crawler = new CrawlerStream();
        crawler.setVisible(true);
    }//GEN-LAST:event_startBtnActionPerformed

    private void tabPaneComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_tabPaneComponentRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_tabPaneComponentRemoved

    private void importCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_importCBActionPerformed

    /**
     * Fills date boxes with initial values
     * @param tablename 
     */
    private void fillDateBoxes(String tablename){
        TABLE_CALENDAR_FORMAT = CalendarHandler.identifyDateType(tweetHandler.getEarliestDate(tablename)) ;
        
        String[] start = CalendarHandler.getDateFormatted(tweetHandler.getEarliestDate(tablename)); //[0] day, [1] month, [2] year
        String[] end = CalendarHandler.getDateFormatted(tweetHandler.getLatestDate(tablename));
        
        systemOutArea.append("EARLIEST DATE --- "+start[0]+","+start[1]+","+start[2]+"\n");
        systemOutArea.append("LATEST DATE --- "+end[0]+","+end[1]+","+end[2] + "\n");
        
        //Fills year boxes
        int firstYear = Integer.parseInt(start[2]);
        int lastYear = Integer.parseInt(end[2]);
        
        if(syearMB.getItemCount() != 0)
            syearMB.removeAllItems();
        if(eyearMB.getItemCount() != 0)
            eyearMB.removeAllItems();
        
        for(int y = firstYear; y <= lastYear; y++){
            syearMB.addItem(y);
            eyearMB.addItem(y);
        }
    }
    
    /**
     * Sets Progress Bar to "Woodpecking".
     */
    public static void setProgressToWork() {
//        progressBar.setValue(0);
        progressBar.setString("Woodpecking...");
        progressBar.setIndeterminate(true);
    }
    
    /**
     * Sets Progress Bar to "Complete".
     */
    public static void setProgressToComplete() {
//        progressBar.setValue(100);
        progressBar.setString("Complete!");
        progressBar.setIndeterminate(false);
    }
    
    /**
     * Thread for Importing CSV Files.
     */
    public class ImportThread implements Runnable {

        @Override
        public void run() {
            String tablename = ImportFiles.importCSVFile();
            insertImportedTables();
        }
        
    }
    
    /** 
    * Demonstrate checking for String that is not null, not empty, and not white 
    * space only using standard Java classes. 
    * 
    * @param string String to be checked for not null, not empty, and not white 
    *    space only. 
    * @return {@code true} if provided String is not null, is not empty, and 
    *    has at least one character that is not considered white space. 
    */  
    public static boolean isNullEmptyWhiteSpaceOnlyByJava(final String string)  
    {  
       return string == null || string.isEmpty() || string.trim().isEmpty();  
    } 
    
    /**
     * Thread for trend detection process.
     */
    public class TweetpeckThread implements Runnable {

        @Override
        public void run() {
            
            /* 
             * IF LANGUAGE MODELER IS SELECTED
             */
            if(lmRB.isSelected()){
                
                boolean keywordCBselected = keywordCB.isSelected();
                boolean keywordTFempty = isNullEmptyWhiteSpaceOnlyByJava(keywordTF.getText());
                boolean dateCBselected = dateCB.isSelected();
                
                if(!keywordCBselected && !dateCBselected) {
                    JOptionPane.showMessageDialog(null, "Please fill in the criteria.", "Filter Criteria Requirement", JOptionPane.INFORMATION_MESSAGE);
                }
                
                else if(keywordCBselected && keywordTFempty) {
                    JOptionPane.showMessageDialog(null, "Please input a keyword.", "Filter Criteria Requirement", JOptionPane.INFORMATION_MESSAGE);
                }
                
                else{
                    setProgressToWork();
                    String method = "LM";
                    NGramDriver.emptyNgram();

                    if(keywordCBselected && !keywordTFempty && dateCBselected) {
                        TweetCleaner tc = new TweetCleaner();
                        String start = smonthMB.getSelectedItem().toString()+" "+sdayMB.getSelectedItem().toString()+" "+syearMB.getSelectedItem().toString();
                        String end = emonthMB.getSelectedItem().toString()+" "+edayMB.getSelectedItem().toString()+" "+eyearMB.getSelectedItem().toString();

                        LMDrillModel lmDrillModel = tc.cleanByKeywordsAndDate(TABLE_NAME, keywordTF.getText(), start, end, TABLE_CALENDAR_FORMAT);

                        if(lmDrillModel.getLevel() == -1){
                            JOptionPane.showMessageDialog(null, "No Tweets Found.", "Tweet Data", JOptionPane.INFORMATION_MESSAGE);
                        }else{
                            String startMonth =  smonthMB.getSelectedItem().toString();
                            String startDay = sdayMB.getSelectedItem().toString();
                            String startYear = syearMB.getSelectedItem().toString();
                            String endMonth =  emonthMB.getSelectedItem().toString();
                            String endDay = edayMB.getSelectedItem().toString();
                            String endYear = eyearMB.getSelectedItem().toString();

                            String keys = keywordTF.getText();
                            keys = keys.replaceAll(",", " ");
                            keys = keys.replaceAll(";", " ");
                            String[] keywords = keys.split(" ");

                            lmDrillModel.setKeywords(keywords);

                            LM_DrillDown p = new LM_DrillDown(lmDrillModel, tabPane);
                            tabPane.add(method + " - LV" + lmDrillModel.getLevel() + " - " + keywordTF.getText() + " - [" 
                                + startMonth + "." + startDay + "." + startYear
                                + "-" + endMonth + "." + endDay + "." + endYear 
                                + "]", p);
                            tabPane.setSelectedComponent(p);
                            tabPane.setTabComponentAt(tabPane.getSelectedIndex(), new ButtonTabComponent(tabPane));
                        }
                        setProgressToComplete();
                    }
                    else if(keywordCBselected && !keywordTFempty){
                        TweetCleaner tc = new TweetCleaner();
                        LMDrillModel lmDrillModel = tc.cleanByKeyword(TABLE_NAME, keywordTF.getText());

                        if(lmDrillModel.getLevel() == -1){
                            JOptionPane.showMessageDialog(null, "No Tweets Found.", "Tweet Data", JOptionPane.INFORMATION_MESSAGE);
                        }else{
                            String keys = keywordTF.getText();
                            keys = keys.replaceAll(",", " ");
                            keys = keys.replaceAll(";", " ");
                            String[] keywords = keys.split(" ");

                            lmDrillModel.setKeywords(keywords);

                            LM_DrillDown p = new LM_DrillDown(lmDrillModel, tabPane);
                            tabPane.add(method + " - LV" + lmDrillModel.getLevel() + " - " + keywordTF.getText(), p);
                            tabPane.setSelectedComponent(p);
                            tabPane.setTabComponentAt(tabPane.getSelectedIndex(), new ButtonTabComponent(tabPane));
                        }
                        setProgressToComplete();
                    }
                    else if(dateCBselected){
                        TweetCleaner tc = new TweetCleaner();
                        String start = smonthMB.getSelectedItem().toString()+" "+sdayMB.getSelectedItem().toString()+" "+syearMB.getSelectedItem().toString();
                        String end = emonthMB.getSelectedItem().toString()+" "+edayMB.getSelectedItem().toString()+" "+eyearMB.getSelectedItem().toString();

                        LMDrillModel lmDrillModel = tc.cleanByDate(TABLE_NAME, start, end, TABLE_CALENDAR_FORMAT);

                        if(lmDrillModel.getLevel() == -1){
                            JOptionPane.showMessageDialog(null, "No Tweets Found.", "Tweet Data", JOptionPane.INFORMATION_MESSAGE);
                        }else{
                            LM_DrillDown p = new LM_DrillDown(lmDrillModel, tabPane);
                            tabPane.add(method + " - LV" + lmDrillModel.getLevel() + " - " + 
                                "[" + smonthMB.getSelectedItem().toString()
                                + "-" + emonthMB.getSelectedItem().toString() + " "
                                + syearMB.getSelectedItem().toString() + "]", p);
                            tabPane.setSelectedComponent(p);
                            tabPane.setTabComponentAt(tabPane.getSelectedIndex(), new ButtonTabComponent(tabPane));
                        }
                        setProgressToComplete();
                    }
                }
            }

            /* 
            ** IF TOPIC MODELLER IS SELECTED
             */
            else if(topicRB.isSelected()){
                
                boolean keywordCBselected = keywordCB.isSelected();
                boolean keywordTFempty = keywordTF.getText().isEmpty();
                boolean dateCBselected = dateCB.isSelected();
                
                if(!keywordCBselected && !dateCBselected) {
                    JOptionPane.showMessageDialog(null, "Please fill in the criteria.", "Filter Criteria Requirement", JOptionPane.INFORMATION_MESSAGE);
                }
                
                else if(keywordCBselected && keywordTFempty) {
                    JOptionPane.showMessageDialog(null, "Please input a keyword.", "Filter Criteria Requirement", JOptionPane.INFORMATION_MESSAGE);
                }
                
                else {
                    setProgressToWork();
                    String method = "TM";

                    if(keywordCBselected && !keywordTFempty && dateCBselected){
                        TweetCleaner tc = new TweetCleaner();
                        String start = smonthMB.getSelectedItem().toString()+" "+sdayMB.getSelectedItem().toString()+" "+syearMB.getSelectedItem().toString();
                        String end = emonthMB.getSelectedItem().toString()+" "+edayMB.getSelectedItem().toString()+" "+eyearMB.getSelectedItem().toString();

                        TMDrillModel tmDrillModel = tc.TMcleanByKeywordsAndDate(TABLE_NAME, keywordTF.getText(), start, end, TABLE_CALENDAR_FORMAT);

                        if(tmDrillModel.getLevel() == -1){
                            JOptionPane.showMessageDialog(null, "No Tweets Found.", "Tweet Data", JOptionPane.INFORMATION_MESSAGE);
                        }else{
                            String startMonth =  smonthMB.getSelectedItem().toString();
                            String startDay = sdayMB.getSelectedItem().toString();
                            String startYear = syearMB.getSelectedItem().toString();
                            String endMonth =  emonthMB.getSelectedItem().toString();
                            String endDay = edayMB.getSelectedItem().toString();
                            String endYear = eyearMB.getSelectedItem().toString();

                            TM_DrillDown p = new TM_DrillDown(tmDrillModel, tabPane);
                            tabPane.add(method + " - LV" + tmDrillModel.getLevel() + " - " + keywordTF.getText() + " - [" 
                                + startMonth + "." + startDay + "." + startYear
                                + "-" + endMonth + "." + endDay + "." + endYear 
                                + "]", p);
                            tabPane.setSelectedComponent(p);
                            tabPane.setTabComponentAt(tabPane.getSelectedIndex(), new ButtonTabComponent(tabPane));
                        }
                        setProgressToComplete();
                    }

                    else if(keywordCBselected && !keywordTFempty) {
                        TweetCleaner tc = new TweetCleaner();
                        TMDrillModel tmDrillModel = tc.TMcleanByKeyword(TABLE_NAME, keywordTF.getText());

                        if(tmDrillModel.getLevel() == -1){
                            JOptionPane.showMessageDialog(null, "No Tweets Found.", "Tweet Data", JOptionPane.INFORMATION_MESSAGE);
                        }else{
                            TM_DrillDown p = new TM_DrillDown(tmDrillModel, tabPane);
                            tabPane.add(method + " - LV" + tmDrillModel.getLevel() + " - " + keywordTF.getText(), p);
                            tabPane.setSelectedComponent(p);
                            tabPane.setTabComponentAt(tabPane.getSelectedIndex(), new ButtonTabComponent(tabPane));
                        }
                        setProgressToComplete();
                    }

                    else if(dateCBselected) {
                        TweetCleaner tc = new TweetCleaner();
                        String start = smonthMB.getSelectedItem().toString()+" "+sdayMB.getSelectedItem().toString()+" "+syearMB.getSelectedItem().toString();
                        String end = emonthMB.getSelectedItem().toString()+" "+edayMB.getSelectedItem().toString()+" "+eyearMB.getSelectedItem().toString();

                        TMDrillModel tmDrillModel = tc.TMcleanByDate(TABLE_NAME, start, end, TABLE_CALENDAR_FORMAT);

                        if(tmDrillModel.getLevel() == -1){
                            JOptionPane.showMessageDialog(null, "No Tweets Found.", "Tweet Data", JOptionPane.INFORMATION_MESSAGE);
                        }else{
                            TM_DrillDown p = new TM_DrillDown(tmDrillModel, tabPane);
                            tabPane.add(method + " - LV" + tmDrillModel.getLevel() + " - " + 
                                "[" + smonthMB.getSelectedItem().toString()
                                + "-" + emonthMB.getSelectedItem().toString() + " "
                                + syearMB.getSelectedItem().toString() + "]", p);
                            tabPane.setSelectedComponent(p);
                            tabPane.setTabComponentAt(tabPane.getSelectedIndex(), new ButtonTabComponent(tabPane));
                        }
                        setProgressToComplete();
                    }
                }
            }

            //IF NO METHOD SELECTED
            else {
                JOptionPane.showMessageDialog(null, "Please select a method.", "Woodpecker Requirement", JOptionPane.INFORMATION_MESSAGE);
            }
            
//            for(int i = 0; i <= 100; i++){
//                progressBar.setValue(i);
//                progressBar.repaint();
//                try{
//                    Thread.sleep(50);
//                }catch(InterruptedException ex){
//                }
//            }
//            systemOutArea.append("\t* "+ TimeUnit.MINUTES.convert(System.nanoTime(), TimeUnit.NANOSECONDS) + " Elapsed\n");
            systemOutArea.append("\t* "+ (double) System.nanoTime()/1000000000 + " Seconds\n");
        }
    
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        /* Create and display the form */
        Woodpecker test = new Woodpecker();
        test.setVisible(true);
        
        /* Drop all temp tables on exit before disposal */
        test.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentHidden(ComponentEvent e) {
                TablesHandler.dropAllTempTables();
                FilesCleaner.cleanAllVisualFiles();
                FilesCleaner.cleanDataFiles();
                ((JFrame)(e.getComponent())).dispose();
                System.exit(0);
            }
        });
        
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Woodpecker().setVisible(true);
//            }
//        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JButton beginBtn;
    private javax.swing.JButton browseBtn;
    private javax.swing.ButtonGroup dataGrp;
    private javax.swing.JCheckBox dateCB;
    private javax.swing.JLabel eDateLabel;
    private javax.swing.JComboBox edayMB;
    private javax.swing.JComboBox emonthMB;
    private javax.swing.JComboBox eyearMB;
    private javax.swing.JPanel filterCriteriaPanel;
    private javax.swing.JRadioButton importBtn;
    private javax.swing.JComboBox importCB;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JCheckBox keywordCB;
    private javax.swing.JTextField keywordTF;
    private javax.swing.JRadioButton lmRB;
    private javax.swing.JRadioButton locdbBtn;
    private javax.swing.ButtonGroup methodGrp;
    public static javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel sDateLabel;
    private javax.swing.JComboBox sdayMB;
    private javax.swing.JButton selectSourceBtn;
    private javax.swing.JComboBox smonthMB;
    private javax.swing.JButton startBtn;
    private javax.swing.JComboBox syearMB;
    public static javax.swing.JTextArea systemOutArea;
    private javax.swing.JTabbedPane tabPane;
    private javax.swing.JRadioButton topicRB;
    private javax.swing.JPanel tweetSourcePanel;
    // End of variables declaration//GEN-END:variables
}
